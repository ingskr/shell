[root@linuxprobe ~]# vim example.sh
#!/bin/bash
echo "当前脚本名称为$0"
echo "总共有$#个参数，分别是$*。"
echo "第1个参数为$1，第5个为$5。"
[root@linuxprobe ~]# sh example.sh one two three four five six
当前脚本名称为example.sh
总共有6个参数，分别是one two three four five six。
第1个参数为one，第5个为five。
在shell终端中逻辑与“&&”,表示当前命令执行成功后才会执行后面的命令。
逻辑或“||”，当前命令执行失败之后，才执行后面命令。
（！）把条件测试中的判断结果取相反的值。
运算符	作用
-eq	是否等于
-ne	是否不等于
-gt	是否大于
-lt	是否小于
-le	是否等于或小于
-ge	是否大于或等于
运算符	作用
-d	测试文件是否为目录类型
-e	测试文件是否存在
-f	判断是否为一般文件
-r	测试当前用户是否有权限读取
-w	测试当前用户是否有权限写入
-x	测试当前用户是否有权限执行

[root@ly linuxprobe]# free man
              total        used        free      shared  buff/cache   available
Mem:        3861484      846808     1271796       22592     1742880     2613264
Swap:       2097148           0     2097148
[root@ly linuxprobe]# FreeMam=`free man | grep Mem: | awk '{print $4}'`（此处标点为tab上面一点）
[root@ly linuxprobe]# echo FreeMam
FreeMam
[root@ly linuxprobe]# [ $FreeMam -lt 1024 ] && echo "Insufficient Memory" || echo "内存充足" 
内存充足
    使用for循环语句从列表文件中读取多个用户名，
    然后为其逐一创建用户账户并设置密码。
    首先创建用户名称的列表文件users.txt，
    每个用户名称单独一行。读者可以自行决定具体的用户名称和个数：
    接下来编写Shell脚本Example.sh。在脚本中使用read命令读取用户输入的密码值，
    然后赋值给PASSWD变量，并通过-p参数向用户显示一段提示信息，告诉用户正在输入的内容即将作为账户密码。在执行该脚本后，
    会自动使用从列表文件users.txt中获取到所有的用户名称，然后逐一使用“id 用户名”命令查看用户的信息，并使用$?判断这条命令是否执行成功，
    也就是判断该用户是否已经存在。需要多说一句，/dev/null是一个被称作Linux黑洞的文件，
    把输出信息重定向到这个文件等同于删除数据（类似于没有回收功能的垃圾箱），可以让用户的屏幕窗口保持简洁。
#!/bin/bash
read -p "Enter The users Password :" PASSWD
for UNAME in `cat users.txt`
do
id $UNAME &> /dev/null
if [ $? -eq 0 ]
then
echo "Already exists"
else
useradd $UNAME &> /dev/null
echo "$PASSWD" | passwd --stdin $UNAME &> /dev/null
if [ $? -eq 0 ]
then
echo "$UNAME , Create success"
else
echo "$UNAME , Create failure"
fi
fi
done

###############################################################################
if语句来实现某台主机是否在线
vim chkhost.sh
#!/bin/bash
ping -c 3 -i 0.2 -w 3 $1 &> /dev/null
if [ $? -eq 0 ]
then
echo "Host $1 is On-line。"
else
echo "Host $1 is off-line。"
fi
#################################################################################
用户输入程序显示成绩区间
vim chksorce.sh
#!/bin/bash
read -p "Enter your score(1-100):" GRADE   
if [ $GRADE -gt 100 ] ; then 
echo "$GRADE is a error number"
elif [ $GRADE -gq 85 ] && [ $GRADE -le 100 ] ; then
echo "$GRADE is Excellent"
elif [ $GRADE -gt 70 ] && [ $GRADE -le 84 ] ; then
echo "$GRADE is Pass"
else
echo "$GRADE NO-pass"
fi
####################################################################################
从列表中读取多个用户名，并逐一创建账户设置密码，users.txt
vim users.txt
adasnf
daffv
dfr
ccc

vim example.sh
#!/bin/bash
read -p "请输入密码:" $PASWD
for UNAME in `cat users.txt`
do
id $UNAME &> /dev/null
if [ $? -eq 0 ]
then
echo "Already exists"
else
useradd $UNAME &> /dev/null
echo "$PASSWD" | passwd --stdin $UNAME &> /dev/null
if [ $? -eq 0 ] ; then
echo "$UNAME , Create success"
else
echo "$UNAME , Create Fail"
fi
fi
done
##################################################################################
批量测试主机是否在线脚本
vim ipadds.txt
192.168.74.138
192.168.74.139
192.168.74.137
vim CheckHosts.sh
#!/bin/bash
HLIST=$(cat ipadds.txt)
for IP in $HLIST
do
ping -w 3 -c 3 -i 0.2 $IP &> /dev/null
if [ $? -eq 0 ] ; then 
echo "Host $IP is On-line"
else
echo "Host $IP is off-line"
fi
done
################################################################################################
产生随机数，并且猜测这个随机数
vim Guess.sh
#!/bin/bash
PRICE=$(expr $RANDOM % 1000)
TIMES=0
echo "商品价格为0-999，猜是多少？"
while true
do
read -p "guess price" INT
let TIMES++
if [ $INT -eq $PRICE ]; then
echo "恭喜你正确，实际价格为$PRICE"
echo "你一共猜了$TIMES次"
exit 0
elif [ $INT -gt $PRICE ];then
echo "highly"
else
echo "lowly"
fi
done
#####################################################################

判断输入的是字母还是其他字符
vim Checkkeys.sh
#!/bin/bash
read -p "请输入一个字符,并Enter确认" KEY
case "$KEY" in 
[a-z]|[A-Z])
echo "您输入的是字母"
;;
[0-9])
echo "你输入的是数字"
;;
*)
echo "你输入的是别的控制字符"
esac
################################################################################
计划任务服务程序
分别为一次性任务和长期任务
例如：
一次性计划任务：今晚11.30开启网站服务
长期计划性任务：每周一凌晨3.25把/home/wwwroot目录打包备份为backup.tar.gz
一次性任务用at命令，“at 时间”形式就可以了
查看已设置好，未执行的业务 at -l,删除 atrm 任务序号
默认采用交互法：
设置在今晚23.30分自动重启网站服务
[root@ly linuxprobe]# at 23:30
at> systemctl restart httpd
at> <EOT>
job 1 at Tue Jun  4 23:30:00 2019
[root@ly linuxprobe]# 
加入管道符，让at命令接收echo命令的输出信息，以达到非交互式的方式创建计划一次性任务目的。
[root@ly linuxprobe]# echo "systemctl restart httpd"| at 23:40
job 2 at Tue Jun  4 23:40:00 2019
[root@ly linuxprobe]# at -l
1	Tue Jun  4 23:30:00 2019 a root
2	Tue Jun  4 23:40:00 2019 a root
删除任务命令 
[root@ly linuxprobe]# atrm 2
[root@ly linuxprobe]# at -l
1	Tue Jun  4 23:30:00 2019 a root
#################################################################
linux中周期性的执行、规律的执行命令
crond服务
crontab -e 创建编辑计划任务
crontab -l 查看当前计划任务
crontab -r 删除某条计划任务
crontab -u 编辑他人的计划任务
·················“分、时、日、月、星期 命令”··························
字段	说明
分	取值为0～59的整数
时	取值为0～23的任意整数
日	取值为1～31的任意整数
月	取值为1～12的任意整数
星期	取值为0～7的任意整数，其中0与7均为星期日
命令	要执行的命令或程序脚本
################################################################
在每周一、三、五的凌晨3点25分，都需要使用tar命令把某个网站的数据目录进行打包处理，使其作为一个备份文件。
[root@ly linuxprobe]# crontab -e
no crontab for root - using an empty one
crontab: installing new crontab
[root@ly linuxprobe]# crontab -l
25 3 * * 1,3,5 /usr/bin/tar -czvf backup.tar.gz /home/wwwroot
（，）表示多个时间段
（-）表示一段连续的时间周期，如日值（12-15），12号到15号
（/）执行任务的间隔时间（“*/2”表示每隔两分钟执行一次）
在crond服务中需要同时包含多条计划任务的命令语句，应每行仅写一条
添加一条计划任务，它的功能是每周一至周五的凌晨1点钟自动清空/tmp目录内的所有文件
····································一定要用绝对路径·································
whereis语句查询














[root@linuxprobe ~]# vim example.sh
#!/bin/bash
echo "当前脚本名称为$0"
echo "总共有$#个参数，分别是$*。"
echo "第1个参数为$1，第5个为$5。"
[root@linuxprobe ~]# sh example.sh one two three four five six
当前脚本名称为example.sh
总共有6个参数，分别是one two three four five six。
第1个参数为one，第5个为five。
在shell终端中逻辑与“&&”,表示当前命令执行成功后才会执行后面的命令。
逻辑或“||”，当前命令执行失败之后，才执行后面命令。
（！）把条件测试中的判断结果取相反的值。
运算符	作用
-eq	是否等于
-ne	是否不等于
-gt	是否大于
-lt	是否小于
-le	是否等于或小于
-ge	是否大于或等于
运算符	作用
-d	测试文件是否为目录类型
-e	测试文件是否存在
-f	判断是否为一般文件
-r	测试当前用户是否有权限读取
-w	测试当前用户是否有权限写入
-x	测试当前用户是否有权限执行

[root@ly linuxprobe]# free man
              total        used        free      shared  buff/cache   available
Mem:        3861484      846808     1271796       22592     1742880     2613264
Swap:       2097148           0     2097148
[root@ly linuxprobe]# FreeMam=`free man | grep Mem: | awk '{print $4}'`（此处标点为tab上面一点）
[root@ly linuxprobe]# echo FreeMam
FreeMam
[root@ly linuxprobe]# [ $FreeMam -lt 1024 ] && echo "Insufficient Memory" || echo "内存充足" 
内存充足
    使用for循环语句从列表文件中读取多个用户名，
    然后为其逐一创建用户账户并设置密码。
    首先创建用户名称的列表文件users.txt，
    每个用户名称单独一行。读者可以自行决定具体的用户名称和个数：
    接下来编写Shell脚本Example.sh。在脚本中使用read命令读取用户输入的密码值，
    然后赋值给PASSWD变量，并通过-p参数向用户显示一段提示信息，告诉用户正在输入的内容即将作为账户密码。在执行该脚本后，
    会自动使用从列表文件users.txt中获取到所有的用户名称，然后逐一使用“id 用户名”命令查看用户的信息，并使用$?判断这条命令是否执行成功，
    也就是判断该用户是否已经存在。需要多说一句，/dev/null是一个被称作Linux黑洞的文件，
    把输出信息重定向到这个文件等同于删除数据（类似于没有回收功能的垃圾箱），可以让用户的屏幕窗口保持简洁。
#!/bin/bash
read -p "Enter The users Password :" PASSWD
for UNAME in `cat users.txt`
do
id $UNAME &> /dev/null
if [ $? -eq 0 ]
then
echo "Already exists"
else
useradd $UNAME &> /dev/null
echo "$PASSWD" | passwd --stdin $UNAME &> /dev/null
if [ $? -eq 0 ]
then
echo "$UNAME , Create success"
else
echo "$UNAME , Create failure"
fi
fi
done

###############################################################################
if语句来实现某台主机是否在线
vim chkhost.sh
#!/bin/bash
ping -c 3 -i 0.2 -w 3 $1 &> /dev/null
if [ $? -eq 0 ]
then
echo "Host $1 is On-line。"
else
echo "Host $1 is off-line。"
fi
#################################################################################
用户输入程序显示成绩区间
vim chksorce.sh
#!/bin/bash
read -p "Enter your score(1-100):" GRADE   
if [ $GRADE -gq 85 ] && [ $GRADE -le 100 ] ; then
echo "$GRADE is Excellent"
elif [ $GRADE -gt 70 ] && [ $GRADE -le 84 ] ; then
echo "$GRADE is Pass"
else
echo "$GRADE NO-pass"
fi




